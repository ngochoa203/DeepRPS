import time

from BE.gamebrain import GameBrain


def test_user_copies_ai_last_move_fast_counter():
    brain = GameBrain(state_dir="./_tmp_state", remember_history=False, random_seed=123)
    uid = "test-copy"

    # First prediction (no previous AI move yet)
    ai_move, meta = brain.predict(uid, ctx=None)

    rounds = 40
    wins = 0
    draws = 0
    loses = 0
    prev_ai = ai_move

    for t in range(rounds):
        # User copies previous AI move
        user_move = prev_ai
        # Determine result from AI perspective
        A = [
            [0, -1, 1],
            [1, 0, -1],
            [-1, 1, 0],
        ]
        res_m = A[ai_move][user_move]
        result = "win" if res_m == 1 else ("draw" if res_m == 0 else "lose")
        brain.feedback(uid, ai_move, user_move, dt_ms=200, result=result)

        ai_move, meta = brain.predict(uid, ctx=None)
        prev_ai = ai_move

        if result == "win":
            wins += 1
        elif result == "draw":
            draws += 1
        else:
            loses += 1

    total = wins + loses  # ignore draws
    if total == 0:
        # shouldn't happen; but avoid division by zero
        assert False, "No decisive rounds recorded"

    win_rate = wins / total
    # Expect strong anti-copy after a few rounds (>75% wins on decisive rounds)
    assert win_rate >= 0.75, f"Win rate too low against copier: {win_rate:.2f} (wins={wins}, loses={loses}, draws={draws})"
